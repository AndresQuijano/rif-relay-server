#!/bin/bash
# Copied and adapted from https://gist.github.com/hoylen/6607180
# to cover the different versions of the getopt command avaialble on
# Linux and macOS: https://stackoverflow.com/a/4300224/6816965

if [ ! -f "dist/commands/Start.js" ]; then
  npm run build
fi

# getopts options
SHORT_OPTS=c:h
LONG_OPTS=funds:,config_file:,help

# help message
SHORT_HELP="Usage: $PROG [options]
Options:
   -c path       an optional path to a file containing an alternative server configuration
   -h            show this help message"

LONG_HELP="Usage: $PROG [options]
Options:
   -c | --config_file  path      an optional path to a file containing an alternative server configuration
   -h | --help                   show this help message"


# default paramters
CONFIG_FILE="server-config.json"

HAS_GNU_ENHANCED_GETOPT=
if getopt -T >/dev/null; then :
else
  if [ $? -eq 4 ]; then
    HAS_GNU_ENHANCED_GETOPT=yes
  fi
fi

function showUsage() {
  if [ -n "$HAS_GNU_ENHANCED_GETOPT" ]
    then echo "$LONG_HELP";
    else echo "$SHORT_HELP";
  fi;
}

if [ -n "$HAS_GNU_ENHANCED_GETOPT" ]; then
  # Use GNU enhanced getopt
  if ! getopt --name "$PROG" --long $LONG_OPTS --options $SHORT_OPTS -- "$@" >/dev/null; then
    echo "$PROG: usage error (use -h or --help for help)" >&2
    exit 2
  fi
  ARGS=`getopt --name "$PROG" --long $LONG_OPTS --options $SHORT_OPTS -- "$@"`
else
  # Use original getopt (no long option names, no whitespace, no sorting)
  if ! getopt $SHORT_OPTS "$@" >/dev/null; then
    echo "$PROG: usage error (use -h for help)" >&2
    exit 2
  fi    
  ARGS=`getopt $SHORT_OPTS "$@"`
fi
eval set -- $ARGS

while [ $# -gt 0 ]; do
  case "$1" in
  -c | --config_file) CONFIG_FILE=$(echo "$2" | xargs); shift;;
  -h | --help)  showUsage; exit 0; shift;;
  # -- means the end of the arguments; drop this, and break out of the while loop
  --) shift; break ;;
  # If invalid options were passed, then getopt should have reported an error,
  # which we checked as VALID_ARGUMENTS when getopt was called...
  *) echo "Unexpected option: $1 - this should not happen."; showUsage; exit 1;;
  esac
  shift
done

# Variable values set either by reading from user input or with the default value
echo "CONFIG_FILE": ${CONFIG_FILE}

# For debug purposes only, we should never enter in the if branch
if [ $# -gt 0 ]; then
  # Remaining parameters can be processed
  for ARG in "$@"; do
    echo "$PROG: argument: $ARG"
  done
fi

if [ "${CONFIG_FILE}" == "" ]; then
   echo "No config file was specified, starting the server with default configuration"
   node dist/commands/Start.js --config server-config.json
else
   echo "Starting server with configuration specified in ${CONFIG_FILE}"
   node dist/commands/Start.js --config=${CONFIG_FILE}
fi
